
FROM ubuntu:20.04
LABEL Description="Ubuntu server with end-user cli tools"
#   docker build  -t ubuntu_rmr -f df_ubuntu .
#   docker run -it -v ~/docker/image_home:/home -p8081:8081 -p3333:3333  ubuntu_rmr

#  AFTER STARTUP: SOURCE ALIASES and INSTALL APPS AS NEEDED:
# > source aliases_bash.sh 
# > sh /scripts/install-b4p.sh 



RUN echo "------- NOTEBOOK USER ID / GROUP ID -------"
ARG NB_USER="rafael"
ARG NB_UID="1000"
ARG NB_GID="100"

ENV HOME=/home



RUN echo "------- SHELL ----------"
ENV SHELL=/bin/bash
SHELL ["/bin/bash", "-c"]



RUN echo "------- OS BASE --------"
USER root
ENV DEBIAN_FRONTEND noninteractive
RUN apt-get update && apt-get install -yq --no-install-recommends \
    locales \
    apt-utils \
    ca-certificates \
    wget \
    curl \
    git \
    tar \
    unzip \
    sudo \
    dpkg \
    pkg-config \
    figlet \
 && apt-get clean && rm -rf /var/lib/apt/lists/*




RUN echo "------  LOCALE -------"
# must install locales (see above) before running
RUN figlet "locale"
RUN locale-gen "en_US.UTF-8"
ENV LANG=en_US.UTF-8 \
    LANGUAGE=en_US:en \
    LC_ALL=en_US.UTF-8




RUN echo "------- BUILD SYSTEM ------"
RUN figlet "build-system"
RUN apt-get update && apt-get install --yes --no-install-recommends \
       build-essential \
        cmake \
        make \
        libtinfo5 \   
        libtool \
        libjson-c-dev \
        libwebsockets-dev \ 
        libreadline-dev \
        libpcre3-dev \
        glib-2.0  \   
        linux-headers-generic\                         
#       automake \
#       autoconf \                                     
#       gcc \                                          
#       dkms \                                         
        && \
    apt-get clean



RUN echo "----------- APPS  ----------"
RUN figlet "apps"
RUN apt-get update && apt-get install --yes --no-install-recommends \
         bash-completion \
         aptitude \
         vim \
	     ranger \
         tldr \
         fzf \
         tree \
         tini \                                      
        && \
    apt-get clean



RUN echo "------ PERMISSIONS ------"
RUN figlet "permissions"
# Script to fix permissions of copied files and scripts
COPY   /scripts/fix-permissions /usr/local/bin/fix-permissions
RUN    chmod a+rx /usr/local/bin/fix-permissions
# Setup work directory (for backward-compatibility)
# RUN mkdir "/home/$NB_USER" 
# RUN mkdir "/home/$NB_USER/work" 
# RUN fix-permissions "/home/$NB_USER/work"




RUN echo "------ LSD ------"
# requires: (binary install)
RUN figlet "LSD"
WORKDIR /home/downloads
ADD https://github.com/Peltoche/lsd/releases/download/0.19.0/lsd-musl_0.19.0_amd64.deb /home/downloads
RUN chmod +x lsd-musl_0.19.0_amd64.deb \
   && dpkg -i lsd-musl_0.19.0_amd64.deb



RUN echo "------ TTYD ------"
# requires: build-essential make cmake libjson-c-dev libwebsockets-dev tini
RUN figlet "TTYD"
# binary release: https://github.com/tsl0922/ttyd/releases
# Copy and run ttyd installation script: 
COPY   /scripts/install-ttyd.sh  /home/downloads/install-ttyd.sh
RUN    chmod a+rx /home/downloads/install-ttyd.sh
RUN    /home/downloads/install-ttyd.sh



RUN echo "------ YottaDB ------"
# Requires: build-essential libtinfo5 pkg-config
RUN figlet "YottaDB"
# Copy and run ydb installation script: 
COPY   /scripts/install-ydb.sh  /home/downloads/install-ydb.sh
RUN    chmod a+rx /home/downloads/install-ydb.sh
RUN    /home/downloads/install-ydb.sh




RUN echo "------ B4P  ------"
RUN figlet "B4P"
# Copy and run B4P installation scrip: 
COPY  /scripts/install-b4p.sh  /home/downloads/install-b4p.sh
RUN   chmod a+rx /home/downloads/install-b4p.sh
RUN   /home/downloads/install-b4p.sh




RUN echo "------- Java 8 -------"
RUN figlet "JAVA"
RUN apt-get update && apt-get install --yes --no-install-recommends \
    openjdk-8-jdk && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Java OpenJDK 8  https://openjdk.java.net/faq/
# Use Java 8 (openjdk 1.8); DO NOT use Java 9 or higher - get errors with OpenRefine
# To determine path, RUN update-java-alternatives --config java => then put into .bashrc
# RUN echo "export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64/bin/java" >> /home/.bash_profile




RUN echo "------ OpenRefine  ------"
RUN figlet "OpenRefine"
# Copy and run OpenRefine installation scrip: 
COPY  /scripts/install-openrefine.sh  /home/downloads/install-openrefine.sh
RUN   chmod a+rx /home/downloads/install-openrefine.sh
RUN   /home/downloads/install-openrefine.sh




RUN echo "------ STARTUP ------"
# Startup directory
WORKDIR /home

# Publish TTYD port
EXPOSE 8081

# Publish OpenRefine port(s)
EXPOSE 3333




# TTYD Usage: https://github.com/tsl0922/ttyd/wiki/Example-Usage
# Manual start on CLI:
#    ttyd -p 8081 bash
# Auto-start when run container
#    ENTRYPOINT ["/sbin/tini", "--"]
#    CMD ["ttyd", "bash"]





