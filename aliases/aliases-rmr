# #!/usr/bin/env bash  <- 'proper' notation
# #!/bin/bash  <- macos 2007 default

# profile -  executed once when login - for all apps - both terminal and nonterminal
# bashrc -   runs only when starting a shell

# Quotes: to be safe, just stick with single quotes when using echo
# Single quote: echo 'literals only' vs double quote echo "literals + variables"

# man | whatis  'commandName'
# 'command' --help
# history|awk '{print $2}'|awk 'BEGIN {FS="|"} {print $1}'|sort|uniq -c|sort -r


# FUNS STUFF ON COMMAND LINE
#-------------------------------------------------------------------------------------
# http://www.tecmint.com/20-funny-commands-of-linux-or-linux-is-fun-in-terminal/
# http://lifehacker.com/302197/useful-command-line-tricks-for-mac-users
# http://lifehacker.com/399468/top-10-command-line-tools
# http://lifehacker.com/eight-terminal-utilities-every-os-x-command-line-user-s-1593793109
# http://www.maketecheasier.com/10-funny-and-useless-linux-command/
# http://unix.stackexchange.com/questions/48059/how-to-clean-up-unnecessary-files

# fortune
# fortune | say


clear
echo '                          _________                           '
echo '                              |                               '
echo '     \________________________|________________________/      '
echo '                             (.)                              '
echo '                              "                               '
echo '---------------------------------------------------------------'
echo 'SYS:       path ssh calc'
echo 'MAINT      all: periodic permisssions apps status'
echo 'INFO       ports ipinfo'
echo 'DEV        npm | conda | brew services list/start/stop'
echo '-----------------------------------------------------------------'
echo 'bash version:' $BASH_VERSION





# PATHS
#-------------------------------------------------------------------------------------
# Ensure user-installed binaries are declared (take precedence) before system or dev paths  
# /usr/bin:/bin:/sbin:/usr/sbin
# PATH=$PATH:/usr/local/bin:/usr/bin:/bin:/sbin:/usr/sbin
# export PATH="/Users/rafael:$PATH"                        # RMR personal bash scripts
# export PATH="/usr/local/sbin:$PATH"                      # brew-installed apps
# export PATH="/usr/local/var:$PATH"		             # source-installed apps (src)
# export PATH="/usr/local/bin:$PATH"		             # binary-installed apps (dmg; Node)

# https://www.cyberciti.biz/faq/appleosx-bash-unix-change-set-path-environment-variable/



# DEV ENVIRONMENT PATHS
# export PATH="/usr/local/bin/npm:$PATH"                        # node
# export JAVA_HOME=`/usr/libexec/java_home -v 1.8`              # JAVA
# export GOPATH=$HOME/go                                        # GO
# export PATH=$PATH:$GOPATH/bin                                 # GO
# export PATH="/Users/rafael/mongodb-enterprise-4.4/bin:$PATH"  # Mongodb
# export PATH="/usr/local/mysql/bin:$PATH"                      # mysql installer
# export PATH="$HOME/anaconda3/bin:$PATH"                       # anaconda
# export PATH="\$PATH:/Applications/Visual Studio Code.app/Contents/Resources/app/bin"



# MYSQL + APACHE + PHP:  Correct installation  <== DO NOT USE BREW!!
# https://www.dyclassroom.com/howto-mac/how-to-install-apache-mysql-php-on-macos-catalina-10-15
# https://coolestguidesontheplanet.com/fastest-way-to-install-wordpress-on-osx-10-6/
# https://coolestguidesontheplanet.com/get-apache-mysql-php-and-phpmyadmin-working-on-macos-sierra/




# PORTS
#-------------------------------------------------------------------------------------
alias ports='lsof -i -P -n | sort'
alias portsTCP='lsof -i | grep LISTEN | grep "TCP \*:" | sort'
alias portsOPEN='lsof -i | grep ESTABLISHED | sort'
alias portsLISTEN='lsof -i -P | grep -i "listen" | sort'
alias ports-info='echo "ports   portsTCP   portsOPEN   portsLISTEN"'


# ALIASES - SYSTEM
#-------------------------------------------------------------------------------------
# aliases beware!  the order of them is critical, since aliases build on aliases.
# https://stackoverflow.com/questions/22465332/setting-path-environment-variable-in-osx-permanently
alias sys-info='paths-info; ports-info; brew-info; filesys-info; functs-info'
alias ipinfo='echo "curl ipinfo.io/ipaddress";open http://ipinfo.io/;open http://www.speedtest.net'
alias maint-periodic='sudo periodic daily weekly monthly; echo "periodic maintenance done"; open  http://ss64.com/osx/'
alias maint-status='echo "periodic maintenance  last run:";  ls -al /var/log/*.out'
alias maint-permissions='sudo /usr/libexec/repair_packages --repair --standard-pkgs --volume / '
alias maint-apps='open /Applications/OnyX.app/; open /Applications/CleanMyMac.app/'
alias maint-all='maint-status; maint-periodic; maint-permissions; echo "post-clean status"; maint-status'
alias m='clear; sh ~/m.sh'



# ALIASES-FILESYSTEM
#-------------------------------------------------------------------------------------
alias c='clear;pwd'
alias home='echo "changing path to home directory"; cd ~ ; pwd'
alias local='echo "changing path to /usr/local"; cd /usr/local; pwd'
alias fileNum='ls -l | wc -l '
alias lsf='ls -F' 				# Full (/=directory; @=symlink; *=executable)
alias cls='clear;ls -F'
alias la='pwd;ls -a -F'		
alias ll='pwd;ls -l -F'		
alias lla='pwd;ls -al'		
alias l.='ls -l -d .*'		# show hidden files
alias ..='cd ..;clear;pwd;ls'
alias ...='cd ..;cd ..;clear;pwd;ls'
alias ....='cd ..;cd ..;cd ..;clear;pwd;ls'
alias filesys-info='echo "c home local ls la ll lla l. .. ...  filesInDir"'


# ALIASES-SAFETY
#-------------------------------------------------------------------------------------
# do not delete / or prompt if deleting more than 3 files at a time #
alias rm='rm -i'
alias mv='mv -i'              #confirmation
alias cp='cp -i'
alias ln='ln -i'
alias chown='chown --preserve-root'     #parenting changing perms on / #
alias chmod='chmod --preserve-root'
alias chgrp='chgrp --preserve-root'


# ALIASES-UTILITIES
#-------------------------------------------------------------------------------------
alias df='df -h'                                  #display free space
alias top='top -o cpu'                            #order by cpu
alias path='echo -e ${PATH//:/\\n}'
alias wget='wget -c'                              #resume wget by default
alias nowdate='date +"%d-%m-%Y"'
alias grep='grep --color=auto'                    #colorize grep command
alias nocomment='grep -Ev '\''^(#|$)'\'''         #show text file without comment(#) lines
alias diff='colordiff'                            #compare files line by line using color
alias countchars='wc -c'            #count chars in file
alias countwords='wc -w'            #count words in file
alias countlines='wc -l'            #count lines in file

alias DS_StoreRemoveRecursive='sudo find . -name \.DS_Store -exec rm -v {} \;'

alias utils-info=' echo "count-chars-words-lines df top path wget nowdate grep nocomment diff DS_StoreRemove"'



# ALIASES-CONSOLE APPS 
#-------------------------------------------------------------------------------------
alias calc='open -a /Applications/Numi.app/Contents/MacOS/Numi'
alias pf='open /Applications/Path\ Finder7.app'
alias gp='git pull;cd ..'
alias julia='cd /Applications/Julia-1.5.app/Contents/Resources/julia/bin; ./julia; home'


# ALIASES - DOCKER
source ~/docker/aliases-docker




# ALIASES-MAC APPS
#-------------------------------------------------------------------------------------
# https://www.wikihow.com/Open-Applications-Using-Terminal-on-Mac
# open -a AppName
alias atom='open -a /Applications/Atom.app/Contents/MacOS/Atom'
alias songbird='open -a /Applications/Songbird_193.app/Contents/MacOS/songbird'
alias firefox='open -a "Firefox"'
alias excel='open -a "Microsoft Excel"'
alias office='open -a "LibreOffice"'




# BREW
#-------------------------------------------------------------------------------------
alias brew-all='clear;echo brew_updating...;brew update; echo brew_upgrade...;brew upgrade;echo brew_cleanup...; brew cleanup -s --force;echo brew_doctor...;brew doctor; echo brew_list...;brew list'
alias brew-reset='cd /usr/local; git fetch origin; git reset --hard origin/master'
alias brew-info='brew info; echo "-----"; brew list;  echo "-----"; echo "brew  -all reset --help"; echo "-------" '


# ESSENTIALS
# wget              b4p requires
# bash              https://itnext.io/upgrading-bash-on-macos-7138bd1066ba
# bash-completion   https://sourabhbajaj.com/mac-setup/BashCompletion/



# SERVICES
# https://github.com/Homebrew/homebrew-services
# https://robots.thoughtbot.com/starting-and-stopping-background-services-with-homebrew
# brew services run|start|stop|restart |list | cleanup --all


# SHELL-BASH: must install via brew to get 2021 version; mac has only 2007 version 
# bash                       
# oh-my-bash        https://github.com/ohmybash/oh-my-bash



# SHELLS - OTHER: not compatible with POSIX or bash
# https://en.wikipedia.org/wiki/Comparison_of_command_shells
# zsh               https://en.wikipedia.org/wiki/Z_shell
# fish              https://en.wikipedia.org/wiki/Fish_(Unix_shell)
# pwsh              https://docs.microsoft.com/en-us/powershell/scripting/install/installing-powershell-core-on-macos?view=powershell-7.1




# APPS
# mmv, rename       multi-file renaming
# task              CLI todo manager
# mas               Mac App Store manager
# cmus              music player
# mc                midnight commander; file browser
# peco              interactive file filter
# googler           google search
# exa               ls
# cmatrix




# BREW-REMOVE ALL
# brew remove --force $(brew list --formula)

# zsh: z shell    https://medium.com/@caulfieldOwen/youre-missing-out-on-a-better-mac-terminal-experience-d73647abf6d7
# ncurses, pcre

# task: task manager   https://taskwarrior.org/
# gmp, bdw-gc, libffi, libtool, pkg-config, readline, guile, libtasn1, nettle, p11-kit, libevent, c-ares, jemalloc, libev, nghttp2, unbound and gnutls

# mc: midnight-commander
# pcre, gdbm, sqlite, xz, python@3.9, glib, libssh2, libpng and s-lang

# dosbox: DOS emulator
# sdl, sdl_net, libogg, libvorbis and sdl_sound

# cmus: music player
# faad2, aom, dav1d, freetype, fontconfig, frei0r, lame, fribidi, lzo, pixman, cairo, gobject-introspection, graphite2, icu4c, harfbuzz, libass, libbluray, libsoxr, libvidstab, libvpx, opencore-amr, jpeg, libtiff, little-cms2, openjpeg, opus, rav1e, rtmpdump, flac, libsndfile, libsamplerate, rubberband, sdl2, snappy, speex, srt, giflib, webp, leptonica, tesseract, theora, x264, x265, xvid, libsodium, zeromq, zimg, ffmpeg, libcue, mad, mp4v2 and opusfile








# VIRTUALBOX
#-------------------------------------------------------------------------------------
# bug starting Virtualbox without first starting the vbox kernel
# http://superuser.com/questions/733367/virtualbox-odd-behaviour-after-updating-the-host-to-os-x-mavericks
# http://nakkaya.com/2012/08/30/create-manage-virtualBox-vms-from-the-command-line/
# https://www.techrepublic.com/article/how-to-run-virtualbox-virtual-machines-from-the-command-line/


alias vbox='echo "vbox-start | vbm  -cmd  -list -state -startvm -compact"'
alias vbox-start='sudo /Library/Application\ Support/VirtualBox/LaunchDaemons/VirtualBoxStartup.sh restart'

alias vbm='VBoxManage'
alias vbm-cmd='echo "vbm: list {vms | runningvms}  | startvm <id> | controlvm <id> {pause | resume | poweroff} | "'
alias vbm-list='echo "RUNNING VMs:";  vbm list runningvms; echo "---- AVAILABLE VMs: ----"; vbm list vms; echo "---- START or CONTROL VM ---"; echo "vbm startvm <id> or controlvm <id> {pause | resume | poweroff}" ' 
alias vbm-state=' vbm list vms -l | grep -e ^Name: -e ^State | sed s/\ \ //g | cut -d: -f2- '
alias vbm-compact='echo "vbm modifyhd --compact <id.vdi> " '
alias vbm-startvm='echo "vbm startvm <id> "'






# PYTHON  (Anaconda)
#-------------------------------------------------------------------------------------
#Anaconda - Python3.7.3 + Scikit + Tensorflow + Juypiter
alias anaconda='open ~/anaconda3/Anaconda-Navigator.app'

# Anaconda update
alias conda-all='conda update --all;conda clean --all'

# JupyterLab
# https://blog.jupyter.org/jupyterlab-is-ready-for-users-5a6f039b8906
# conda install -c conda-forge jupyterlab
alias nb='jupyter lab'

## Anaconda environment inconsistent?  Here's the fix:
# https://github.com/conda/conda/issues/8490
#    conda update --force conda
#    conda update conda
#    conda update all


# Perceptilabs
# https://www.anaconda.com/products/individual
# intall:  pip install perceptilabs
# launch:  perceptilabs


# Google Calendar from CLI
# pip install gcalcli






# NODE 
#-------------------------------------------------------------------------------------
# DO NOT INSTALL VIA BREW; Brew messes with NPM package management !!!
# To fix messed up installation:  https://gist.github.com/DanHerbert/9520689

# Install from https://nodejs.org/en/
# Node.js was installed at:    /usr/local/bin/node
# npm was installed at:       /usr/local/bin/npm
# Make sure that /usr/local/bin is in your $PATH.

# NPM install path problems because two node binaries are on the system
# https://github.com/npm/npm/issues/14372
# https://stackoverflow.com/questions/14803978/npm-global-path-prefix
#   npm config set scripts-prepend-node-path true
#   npm config get prefix

alias node-dir='cd /Users/rafael/node/npm_modules-link@;ll;echo "changing to node module directory"'
alias node-info='echo "node-dir" '


# Node:  React Native
# https://facebook.github.io/react-native/docs/getting-started.html#content

# /usr/local/bin/gulp -> /usr/local/lib/node_modules/gulp/bin/gulp.js





# JULIA and JUNO  (Atom editor)
# https://docs.julialang.org/en/v1/
# https://towardsdatascience.com/julias-package-manager-is-awesome-23b9c02e3a0b
# http://docs.junolab.org/latest/
# http://weavejl.mpastell.com/stable/
# https://atom.io/
# http://ucidatascienceinitiative.github.io/IntroToJulia/




# MySQL: 
#-------------------------------------------------------------------------------------
# Do NOT install with brew;  It is IMPOSSIBLE to configure socket connection; 
# USE native installer
# https://dev.mysql.com/doc/mysql-osx-excerpt/8.0/en/osx-installation-pkg.html




# GO
#-------------------------------------------------------------------------------------
# https://github.com/abourget/getting-started-with-golang/blob/master/Getting_Started_for_MAC_OS_X.md
# http://www.golangbootcamp.com/book/get_setup
# http://www.golangbootcamp.com/book/_single-page




# FUNCTIONS
#-------------------------------------------------------------------------------------
# http://murphymac.com/tree-command-for-mac/




# Useful commands
#-------------------------------------------------------------------------------------# http://ss64.com/osx/
# http://www.infoworld.com/d/applications/top-20-os-x-command-line-secrets-power-users-202466?page=0,3
# http://www.howtogeek.com/forum/topic/mac-terminalcmd-commands
#
# locate        find file
# lsof -i ls    open file: reveal open TCP and UDP ports and apps using them
# open          launch apps or directory/path
# opendiff      compare and merge files and directories
# pgrep pkill   find or signal a program or process by name
# qlmanage -p   quick look / preview of file
# shutdown       restart mac
# systemsetup   system configs/preferences
# textutil -info MyWordFile display file info
# textutil -convert html MyWorldFile -output /tmp/webfile.html    convert file to html
# top
# uptme   time since last reboot










#============================ APPLE SPECIFIC ==================================================

#QUIT App
# place 'quit' shell command in  /Volume/SSD/rafael/quit
# place symlink for 'quit' in  /usr/local/bin

# Save screenshots to the desktop
defaults write com.apple.screencapture location -string "$HOME/Desktop"

# Save screenshots in PNG format (other options: BMP, GIF, JPG, PDF, TIFF)
defaults write com.apple.screencapture type -string "png"

# Avoid creating .DS_Store files on network volumes
defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true

#show path in finder window (YES,NO)
defaults write com.apple.finder _FXShowPosixPathInTitle -bool YES 

#text to speech (any text)
# say "new bash terminal"

#show hiden files in finder (TRUE,FALSE)
#defaults write com.apple.finder AppleShowAllFiles TRUE 

# APPLE: SPEED ENHANCEMENTS 
# http://www.chriswrites.com/2012/01/17-ways-to-speed-up-mac-os-x-lion/
# https://github.com/mathiasbynens/dotfiles/blob/master/.osx

# Disable the switching Spaces animation
#defaults write com.apple.dock workspaces-swoosh-animation-off -bool YES && killall Dock

# Disable menu bar transparency
#defaults write NSGlobalDomain AppleEnableMenuBarTransparency -bool false

# Expand save panel by default
#defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true

# Disable the “Are you sure you want to open this application?” dialog
#defaults write com.apple.LaunchServices LSQuarantine -bool false

# Enable full keyboard access for all controls (e.g. enable Tab in modal dialogs)
#defaults write NSGlobalDomain AppleKeyboardUIMode -int 3











#= DATA SCIENCE AT COMMAND LINE =========================== 
# http://datascienceatthecommandline.com/
# export COMMANDLINE_SCIENCE='/Volumes/SSD/rafael/git/data-science-at-the-command-line/tools'
# export PATH="/Volumes/SSD/rafael/git/data-science-at-the-command-line/tools:$PATH"


#JQ - lightweight command line JSON processor
#http://stedolan.github.io/jq/

#bashplotlib
#https://github.com/glamp/bashplotlib

#eplot -  "easy gnuplot" wrapper - pipes data through gnuplot
#http://liris.cnrs.fr/christian.wolf/software/eplot/index.html

#gnuplot
#http://www.gnuplot.info/

#prettytable
#http://code.google.com/p/prettytable/

#tablulate
#https://pypi.python.org/pypi/tabulate

#csvkit
#https://csvkit.readthedocs.org/en/0.9.0/tutorial/1_getting_started.html

#pandas
#http://pandas.pydata.org/pandas-docs/stable/index.html

#datasciencetoolkit
#http://www.datasciencetoolkit.org/developerdocs

#command line data wrangling
#https://github.com/rgrp/command-line-data-wrangling












#=============  VA DATA PROJECTS - RETIRED 2018 ====


# VICS - Veteran Integrated Care Services [VAGRANT VERSION]
#-------------------------------------------------------------------------------------
alias vics='clear; sh ~/vics.sh'

# Server Status
alias vics-reload='cd ~/vagrant/VICSServer/setup; vagrant reload'
alias vics-halt='cd ~/vagrant/VICSServer/setup; vagrant halt'
alias vics-status='cd ~/vagrant/VICSServer/setup; vagrant status'

# Server Access:  IP 10.2.2.222
# web ssh: Install on guest VM: sudo apt-get install shellinabox ==> Requires port 4200 to be opened
alias vics-webssh='echo "VICSServer ssh user/pass: vdp/vdp"; open https://10.2.2.222:4200/'
alias vics-ssh='echo "VICSServer ssh user/pass: vdp/vdp"; vagrant ssh'
# or:  ssh vdp@10.2.2.222'

# Web Clients
alias vics-model='open http://10.2.2.222:9000/schema'
alias vics-query='open http://10.2.2.222:9000/query'
alias vics-router='open http://10.2.2.222:9012'

# CPRS Client (wine)
#user/pass:  fakedoc1 / 1doc!@#$ -> fakedoc1#
alias cprs-client='cd ~/.wine/drive_c/Program\ Files/CPRS_1_0_31_116; wine CPRSChart.exe'




# nodeVISTA  - [DOCKER VERSION]
#-------------------------------------------------------------------------------------
alias nv='clear; sh ~/nv.sh'

# Server Status
alias nv-reload='docker restart nodevista999'
alias nv-status='docker ps'

# Server Access
# Direct terminal:
alias nv-ssh='echo "Entering nodeVISTA VM command line; type 'exit' to finish"; docker exec -it nodevista999 bash'
# Web terminal: Requires installation in guest VM:  sudo apt-get install shellinabox
# alias nv-ssh-web='echo "nodeVISTA ssh user/pass: vdp/vdp"; open https://10.2.2.100:4200/'


# VISTA Data Model
# VDM Browser (old name: Fileman Schema Browser)
alias vdm-browser='open http://localhost:9100/schema'
# VDM Query (old name: FMQL Query)
alias vdm-query='open http://localhost:9100/query'


# CPRS Client
# Win Emulation: Install Wine
# https://www.davidbaumgold.com/tutorials/wine-mac/
alias cprs-client='cd /Users/rafael/.wine/drive_c/Program Files/cprs30/CPRS; wine CPRSChart.exe'
# Win VM: Install Win10 in Virtualbox from ISO and label "Win10-CPRS"
# https://www.microsoft.com/en-us/software-download/windows10ISO
# alias cprs-vm='VBoxManage startvm "Win10-CPRS"'
# For both Windows methods, follow CPRS installation instructions
# http://vistadataproject.info/demo/#cprs--rpc-server-installation
# alias win10-vm='VBoxManage startvm "Win10"'



# Cliical Services
# alias nv-cs-demo=' echo "Starting MVDM Clinical Services demo"; br; cd ~/git/rafael5/vdp/nodeVISTAClients/console; node console.js '
# alias nv-cs-status='cd ~/git/rafael5/vdp/nodeVISTAClients/console; curl http://localhost:9030'
# echo "    <==    If the response is no authentication token, the service is working correctly and ON; 
# If there is no respoinse, or failure to connect, the clinical service is OFF."
